REM /**
REM  * Utils.bbj
REM  * @author admin
REM  *
REM  */

class public Login

	field public BBjString cuenta!
	field public BBjString email!
	field public BBjString hashed!
	field public BBjString token!
	field public BBjInt confirmado!
	field public BBjInt uid!

	use ::jwt.bbj::Jwt
	use org.mindrot.jbcrypt.BCrypt

	method public Login(BBjString email!)
		#email!=email!
		while 1
			SQLChan = SQLunt
			SQLOpen(SQLChan)"NcusDB"
			SQLPrep(SQLChan)"select uid, cuenta, token, confirmado,password from login where email=?"
			SQLExec(SQLChan,err=*break)email!
			dim login$:SQLTMPL(SQLChan)
			login$=SQLFetch(SQLChan,err=*break)
			#cuenta!=login.cuenta$
			#token!=login.token$
			#confirmado!=login.confirmado
			#uid!=login.uid
			#hashed!=CVS(login.password$,3)
			break
		wend
		SQLClose(SQLChan)
	methodend

	method public Boolean bloqueado()
		SQLChan = SQLunt
		SQLOpen(SQLChan)"NcusDB"
		SQLPrep(SQLChan)"select intentos from login where uid=?"
		SQLExec(SQLChan,err=*break)#uid!
		dim login$:SQLTMPL(SQLChan)
		login$=SQLFetch(SQLChan,err=*break)
		intentos=login.intentos
		SQLClose(SQLChan)
		if intentos>3 then 
			methodret Boolean.TRUE 
		else
			methodret Boolean.FALSE
		endif
	methodend

	method public Boolean existe()
		sql$="select uid from login where email='"+#email!+"'"
		rs! = BBJAPI().createSQLRecordSet("NcusDB",modes$,sql$,BBjAPI.FALSE)
		existe=rs!.getRecordCount()
		rs!.close()
		if existe then
			methodret Boolean.TRUE
		else
			methodret Boolean.FALSE
		endif
	methodend

	method public Boolean crear(BBjString cuenta!, BBjString email!, BBjString password!)
		params! = new java.util.HashMap()
		params!.put("email", email!)
		params!.put("confirmado","")
		jwt! = Jwt.sign(params!,0)
		hashed! = BCrypt.hashpw(password!, BCrypt.gensalt())
		while 1
			sql$="insert into login (uid, cuenta, email, password, token) values (login_uid.nextval, '"+cuenta!+"','"+email!+"','"+hashed!+"','"+jwt!+"')"
			java.lang.System.out.println(sql$)
			SQLChan = SQLunt
			SQLOpen(SQLChan)"NcusDB"
			SQLPrep(SQLChan)sql$
			SQLExec(SQLChan,err=*break)
			SQLClose(SQLChan)			
			#cuenta!=cuenta!
			#email!=email!
			#token!=CAST(BBjString,jwt!)
			methodret Boolean.TRUE
		wend
		SQLClose(SQLChan)			
		methodret Boolean.FALSE
	methodend

	method public Boolean confirmar()
		params! = new java.util.HashMap()
		params!.put("email", #email!)
		params!.put("confirmado","true")
		jwt! = Jwt.sign(params!,0)
		while 1
			sql$="update login set confirmado=1, token='"+jwt!+"' where email=?"
			SQLChan = SQLunt
			SQLOpen(SQLChan)"NcusDB"
			SQLPrep(SQLChan)sql$
			SQLExec(SQLChan,err=*break)#email!
			SQLClose(SQLChan)
			methodret Boolean.TRUE
			break
		wend
		SQLClose(SQLChan)
		methodret Boolean.FALSE
	methodend

	method public Boolean cambiopassword(BBjString password!)
		hashed! = BCrypt.hashpw(password!, BCrypt.gensalt())
		while 1
			sql$="update login set password='"+hashed!+"' where email=?"
			SQLChan = SQLunt
			SQLOpen(SQLChan)"NcusDB"
			SQLPrep(SQLChan)sql$
			SQLExec(SQLChan,err=*break)#email!
			SQLClose(SQLChan)
			methodret Boolean.TRUE
			break
		wend
		SQLClose(SQLChan)
		methodret Boolean.FALSE
	methodend

	method public Boolean passwordValido(BBjString password!)
		if BCrypt.checkpw(password!, #hashed!) then
			sql$="update login set intentos=0, lastlogin='"+date(0:"%Yl-%Mz-%Dz")+"' where uid=?"
			SQLChan = SQLunt
			SQLOpen(SQLChan)"NcusDB"
			SQLPrep(SQLChan)sql$
			SQLExec(SQLChan,err=*break)#uid!
			SQLClose(SQLChan)
			methodret Boolean.TRUE
		else
			sql$="update login set intentos=intentos+1, lastlogin='"+date(0:"%Yl-%Mz-%Dz")+"' where uid=?"
			SQLChan = SQLunt
			SQLOpen(SQLChan)"NcusDB"
			SQLPrep(SQLChan)sql$
			SQLExec(SQLChan,err=*break)#uid!
			SQLClose(SQLChan)
			methodret Boolean.FALSE
		endif
	methodend

classend

class public Socio

	field public BBjString cuenta!

	method public Socio(BBjString cuenta!)
		#cuenta!=cuenta!
		while 1
			SQLChan = SQLunt
			SQLOpen(SQLChan)"NcusDB"
			SQLPrep(SQLChan)"select * from SOCIOS where cuenta=?"
			SQLExec(SQLChan,err=*break)cuenta!
			dim socios$:SQLTMPL(SQLChan)
			socios$=SQLFetch(SQLChan,err=*break)
			break
		wend
		SQLClose(SQLChan)
	methodend

	method public Boolean existe()

		REM En esta seccion hay que validar que para la cuenta enviada exista una entrada en SOCIOS.
		REM Se debe validar tambien el Seg Social
		REM En adicion se podria validar si existe el mismo email en las tablas de NCUS.
		REM Por el momento solo validamos que exista cualquier numero de cuenta.
		
		sql$="select * from SOCIOS where cuenta='"+#cuenta!+"'"
		rs! = BBJAPI().createSQLRecordSet("NcusDB",modes$,sql$,BBjAPI.FALSE)
		existe=rs!.getRecordCount()
		rs!.close()

		if existe then 
			methodret Boolean.TRUE
		else
			methodret Boolean.FALSE
		endif
	methodend

classend
